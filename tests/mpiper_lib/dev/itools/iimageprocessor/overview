<center>
<h1>iTools Programming</h1>
<h2>Creating an iTool with a custom user interface</h2>
</center>

<p> In this example, 
we explore how to make an iTool 
with a custom user interface (UI)
using iTool compound widgets 
in conjunction with "traditional" IDL widgets.

<p> There are two ways to create a custom UI for an iTool:
<ol>
<li> Add a UI panel to an existing iTool
<li> Create your own iTool UI from scratch
</ol>

<p> A UI panel is a base widget attached to the side of a standard iTool
(e.g., on iImage) that holds additional widget controls. If you desire
an application with a small number of controls not available in the
standard iTool interface, consider creating a UI panel rather than an
entire custom user interface; it's easier.

<p> Here, however, we build a completely new custom iTool UI.  The
plan is to convert the <i>Intermediate Programming with IDL</i> class'
IMAGEPROCESSOR program from a traditional IDL widget program to a
custom iTool, called iImageprocessor, as shown below.

<center>
<p><a><img src="./iimageprocessor.png" alt="iImageprocessor"></a>
</center>

<p>Creating a custom iTool interface from scratch requires four parts.
<ol>
<li> An iTool class definition
<li> A widget definition module
<li> A widget event handling module
<li> An iTool launch routine
</ol>

<p> The class definition  serves to define what UI components from
the standard iTool system should be included in or discarded from the
custom iTool UI.  In this example, the class definition is stored in
the file <b>iimageprocessor__define.pro</b>.

<p> The widget definition module is used to define the widgets in the
custom iTool interface. In the definition, both iTool compound widgets
and traditional IDL widgets can be used. Note that iTool compound
widgets are not quite like standard IDL compound widgets in that they
do not generate widget events and you cannot get or set their values
using WIDGET_CONTROL.

<p> The widget event handling module is used to handle events
generated in the UI. Events generated in traditional widgets can be
handled in the traditional manner, with event handlers, using the
usual event handling schemes. Events generated by iTool system
components (e.g., the Menu bar, the Tool bar, the Display) can be
handled in a callback routine, or they can just be handled by the
iTool system by default.

<p> Here, the widget definition routine
and event handlers can be found in <b>iimageprocessor_tool.pro</b>.


<p> The launch routine is used to register the new iTool class and UI
with the iTool system and start the iTool. 

Input data (if available) may also be loaded into the iTool through
the launch routine. 
IPLOT, ISURFACE, etc., are examples of launch routines.

The launch routine for the iImageprocessor iTool is located in
<b>iimageprocessor.pro</b>.

<p> A good process to follow is to first 
write the class definition  to subclass from the iTool system and
state what components of the iTool UI to keep/discard. Next, write the
UI definition programs. Last, write the iTool launch routine.

<p> Much of the code in this example is based on <b>idlitwdtool.pro</b>
in the <b>lib/itools/ui_widgets</b> subdirectory.  This is the
standard iTool widget interface; it's a start point for any iTool.





