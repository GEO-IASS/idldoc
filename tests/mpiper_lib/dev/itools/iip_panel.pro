;============================================================================
;+
; The callback routine for handling of events from the iTool system.
;
; @param wpanel {in}{type=long} The widget identifier of the panel...
; @param oui {in}{type=object} The object reference of the iTool on
;    which this panel is displayed.
;-
PRO iip_panel_callback, wPanel, strID, messageIn, component
    compile_opt idl2

    print, 'hi there'
    return

   ; Make sure we have a valid widget ID.
   IF ~ WIDGET_INFO(wPanel, /VALID) THEN RETURN

   ; Retrieve the widget ID of the first child widget of
   ; the UI panel.
   wChild = WIDGET_INFO(wPanel, /CHILD)

   ; Retrieve the state structure from the user value of
   ; the first child widget.
   WIDGET_CONTROL, wChild, GET_UVALUE = state
   
   ; Process as necessary, depending on the message received.
   SWITCH STRUPCASE(messageIn) OF
   
      ; This section handles messages generated when the rotate
      ; operation becomes available or unavailable, and sensitizes
      ; or desensitizes the "Rotate" button accordingly.
      'SENSITIVE':
      'UNSENSITIVE': BEGIN
         WIDGET_CONTROL, state.wRotate, $
            SENSITIVE = (messageIn EQ 'SENSITIVE')
         BREAK
      END

      ; This section handles messages generated when the
      ; item selected in the iTool window changes and changes
      ; the sensitivity of the "Hide/Show" button accordingly.
      'SELECTIONCHANGED': BEGIN
         ; Retrieve the item that was selected last.
         oSel = state.oTool->GetSelectedItems()
         oSel = oSel[0]
         ; If the last item selected is not a visualization, 
         ; desensitize the "Hide/Show" button.
         IF (~OBJ_ISA(oSel, 'IDLITVISUALIZATION')) THEN  $
            WIDGET_CONTROL, state.wHide, SENSITIVE = 0 $
         ELSE BEGIN
         ; If the selected object is a visualization, sensitize
         ; the "Hide/Show" button.
            WIDGET_CONTROL, state.wHide, SENSITIVE = 1
         ENDELSE
         BREAK
      END
      ELSE:
   ENDSWITCH
   
END



;============================================================================
;+
; The event handler for standard widget events in the iIp panel.
;
; @param event {in}{type=structure} The event structure passed from
;    XMANAGER.
;-
pro iip_panel_event, event
    compile_opt idl2

    print, 'yo'
    return

    ;; Get the state variable and the user name of the widget that
    ;; generated the event.
    wstash = widget_info(event.handler, /child)
    widget_control, wstash, get_uvalue=pstate
    uname = widget_info(event.id, /uname)



   ; Refresh the iTool window.
   (*pstate).otool->refreshcurrentwindow
end



;============================================================================
;+
; Cleanup routine, used to destroy the panel's state variable when the
; iTool UI is dismissed.
;
; @param wstash {in}{type=long} The widget identifier of the stash
; (the first child of the top-level base in the panel).
;-
pro iip_panel_cleanup, wstash
    compile_opt idl2

    ;; Get the state variable from the stash and destroy it.
    widget_control, wstash, get_uvalue=pstate
    if ptr_valid(pstate) then ptr_free, pstate
end



;============================================================================
;+
; The widget creation routine for the iIP panel. Used to define the
; widgets seen in the panel. Also defines the state variable for the
; panel and the name of the kill_notify routine.
;
; @file_comments These routines create a UI panel and handle events
; within it -- both standard widget events and callbacks from the
; iTools system.
;
; <p> Compare with <b>example4_panel.pro</b> in the
; <b>examples/doc/itools</b> directory. It demonstrates more complex
; behavior (especially in the callback routine) than the current
; example.
;
; @param wpanel {in}{type=long} The widget identifier of the panel, a
;   base widget generated by the iTool to which this panel is
;   attached.
; @param oui {in}{type=object} The object reference of the UI object
;   associated with the iTool on which this panel is displayed.
; @requires IDL 6.1
; @author Mark Piper, RSI, 2004
;-
pro iip_panel, wpanel, oui
    compile_opt idl2

    ;; Register the panel with the user interface object.
    obs_id = oui->registerwidget(wpanel, 'panel', $
        'iip_panel_callback')

    ;; Register to receive selection events on visualizations.
    oui->addonnotifyobserver, obs_id, 'visualization'

    ;; Set the panel's title and its event handler.
    widget_control, wpanel, $
        base_set_title='Image Processing', $
        event_pro="iip_panel_event"

    ;; Make the panel display a series of image processing controls.
    wcontrolbase = widget_base(wpanel, /column)
    wsmooth  = widget_button(wcontrolbase, $
                             value='Smooth', $
                             uname='smooth')
    wmedian  = widget_button(wcontrolbase, $
                             value='Median', $
                             uname='median')
    wusmask  = widget_button(wcontrolbase, $
                             value='Unsharp Mask', $
                             uname='mask')
    wsobel   = widget_button(wcontrolbase, $
                             value='Sobel', $
                             uname='sobel')
    wroberts = widget_button(wcontrolbase, $
                             value='Roberts', $
                             uname='roberts')
    whistog  = widget_button(wcontrolbase, $
                             value='Histogram', $
                             uname='histogram')
    wbscale  = widget_button(wcontrolbase, $
                             value='Byte Scale', $
                             uname='bytscl')
    wneg     = widget_button(wcontrolbase, $
                             value='Negative', $
                             uname='invert')
    wstats   = widget_button(wcontrolbase, $
                             value='Statistics', $
                             uname='statistic')

    ;; Make a state variable and store it in the panel's first child
    ;; (this leaves the panel's user value open for other use).
    state = { $
        otool        : oui->gettool(), $         
        oui          : oui, $
        wpanel       : wpanel, $
        wcontrolbase : wcontrolbase $
        }
    pstate = ptr_new(state, /no_copy)
    wstash = widget_info(wpanel, /child)
    widget_control, wstash, set_uvalue=pstate

    ;; Name a routine to be called for cleanup when the iTool UI is
    ;; dismissed.
    widget_control, wstash, kill_notify='iip_panel_cleanup'
end

