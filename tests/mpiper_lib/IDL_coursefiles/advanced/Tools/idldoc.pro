;2345678901234567890123456789012345678901234567890123456789012345678901234567890

;+
; IDLdoc version is given.
;
; @private
; @returns string representing IDLdoc's current version
; @keyword build {in}{optional}{type=boolean} set to return a string with the
;          build date in it also
;-
function idldoc_version, build=build
    compile_opt idl2, hidden
    on_error, 2

    build_info = ''

    if (keyword_set(build)) then begin
        loc = sourceroot()
        sav_file = loc + 'idldoc.sav'
        if (file_test(sav_file)) then begin
            finfo = file_info(sav_file)
            build_info = ' Build date: ' + systime(0, finfo.mtime)
        endif
    endif

    return, '1.4 beta' + build_info
end


;+
; Copies a file.
;
; @private
; @param src {in}{type=string} source filename
; @param dst {in}{type=string} destination filename; if this file exists
;        already, it will be overwritten
;-
pro idldoc_binary_filecopy, src, dst
    compile_opt idl2, hidden
    on_error, 2

    if (not file_test(src)) then return

    openr, rlun, src, /get_lun
    sz = (fstat(rlun)).size
    data = bytarr(sz)

    openw, wlun, dst, /get_lun

    readu, rlun, data
    writeu, wlun, data

    free_lun, wlun
    free_lun, rlun
end


;+
; Copies the contents of the ASCII file src to dst.
;
; @private
; @param src {in}{type=string} filename of the src file
; @param dst {in}{type=string} filename of the dst file; if this file exists
;        already, it will be overwritten
;-
pro idldoc_filecopy, src, dst
    compile_opt idl2, hidden

    openr, rlun, src, /get_lun
    openw, wlun, dst, /get_lun

    printf, wlun, '/* This file is generated - do not edit this file! Edit ' $
        + src + ' instead */'
    printf, wlun

    line = ''
    while (not eof(rlun)) do begin
        readf, rlun, line
        printf, wlun, line
    endwhile

    free_lun, rlun
    free_lun, wlun
end


;+
; Find the "at" symbol in line of comments.
;
; @private
; @param lines {in}{type=string array} lines of IDL comments
; @param line_num {out} {type=int} line number of the "at" symbol
; @param pos {out}{type=int} position of the "at" symbol
;-
pro idldoc_find_at_symbol, lines, line_num, pos
    compile_opt idl2, hidden

    indices = where(strpos(lines, '@') ne -1, count)
    if (count eq 0) then line_num = -1 else begin
        line_num = indices[0]
        pos = strpos(lines[line_num], '@')
    endelse
end


;+
; Changes any file specification notation to the web notation ("/").
;
; @private
; @returns string or string array with path separators changed to "/" since
;          the web always uses "/"
; @param dir {in}{type=string or string array} represents directory path(s)
;-
function idldoc_elim_slash, dir
    compile_opt idl2, hidden

    if (n_elements(dir) eq 1) then begin
        delims = '[]/\:]'
        tokens = strsplit(dir, delims, /extract, /regex)
        if (n_elements(tokens) eq 1) then return, tokens[0]
        if (tokens[0] eq '.') then tokens = tokens[1:*]
        return, strjoin(tokens, '/') ; web always uses /
    endif else begin
        rdir = strarr(n_elements(dir))
        for i = 0, n_elements(dir) - 1 do $
            rdir[i] = idldoc_elim_slash(dir[i])
        return, rdir
    endelse
end


;+
; Process the tags in the overview file.
;
; @private
; @param tag_lines {in}{type=string array} the portion of the file specified
;        by overview that has at signs in it
; @param pro_dirs {in}{type=string array} directories under root that hold
;        .pro files
; @param comments {in}{out}{type=string array} comments for the pro_dirs
;        directories; matches elementwise
; @keyword warnings {out}{optional}{type=int} a named variable to return the
;          number of warnings
;-
pro idldoc_process_tags, tag_lines, pro_dirs, comments, warnings=warnings
    compile_opt idl2, hidden

    big_line = add_lines(tag_lines)
    new_lines = (strsplit(big_line, '@', /extract))[0:*]

    for i = 0, n_elements(new_lines) - 1 do begin
        tokens = strsplit(new_lines[i], /extract)
        case strlowcase(tokens[0]) of
        'dir' : begin
                if (n_elements(tokens) le 3) then return
                s_names = idldoc_elim_slash(pro_dirs)
                indices = where(s_names eq tokens[1], count)
                if (count eq 0) then begin
                    print, 'Unknown dir tag: ' + tokens[1]
                    warnings = warnings + 1
                    return
                endif
                comments[indices[0]] = add_lines(tokens[2:*])
            end
        else : begin
                print, 'Unknown tag @' + strlowcase(tokens[0])
                warnings = warnings + 1
            end
        endcase
    endfor
end


pro idldoc_write_etc, etc_files, title=title, subtitle=subtitle, $
    footer=footer, embed=embed, nonavbar=nonavbar, user=user
    compile_opt idl2


    for i = 0, n_elements(etc_files) - 1 do begin
        html_filename = idldoc_pro_to_html(etc_files[i])

        slashes = stroccur(etc_files[i], '\/:', count=levels)
        root = ''
        for j = 0, levels - 2 do $
            root = root + '../'

        h = obj_new('html_output')

        h->add, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"' $
            + '"http://www.w3.org/TR/REC-html40/loose.dtd">'
        h->add, '<!-- Generated by IDLdoc on ' + systime() + ' -->'

        h->add, '<HEAD>'
        h->add, '<TITLE>IDLdoc file</TITLE>'

        if (keyword_set(embed)) then begin
            openr, slun, 'idldoc.css', /get_lun
            sline = ''
            h->add, '<STYLE><!--'
            while (not eof(slun)) do begin
                readf, slun, sline
                h->add, sline
            endwhile
            h->add, '--></STYLE>'
            free_lun, slun
        endif else begin
            h->add, '<LINK REL=stylesheet TYPE="text/css" HREF="' + root $
                + 'idldoc.css" ' + 'TITLE="main_style">'
        endelse

        h->add, '</HEAD>'
        h->add, '<BODY CLASS="standard">'

        if (not keyword_set(nonavbar)) then $
            idldoc_navbar, html=h, /etc, $
                href_overview=root+'overview.html', $
                user=keyword_set(user), $
                href_self=html_filename, $
                href_index=root+'full-index.html', $
                href_start=root+'index.html', $
                href_help=root+'help.html', $
                title=title, $
                subtitle=subtitle

        openr, elun, etc_files[i], /get_lun
        eline = ''
        while (not eof(elun)) do begin
            readf, elun, eline
            h->add, eline
        endwhile
        free_lun, elun

        ; End content of index
        h->add, '<P>'

        ; Put footer in - if present
        if (n_elements(footer) ne 0) then begin
            h->add, '<HR>'
            openr, flun, footer, /get_lun
            fline = ''
            while (not eof(flun)) do begin
                readf, flun, fline
                h->add, fline
            endwhile
            free_lun, flun
        endif

        h->add, '<HR>'
        h->add, '<FONT CLASS="tagline">Produced by IDLdoc ' $
            + idldoc_version() + ' on ' + systime() + '</FONT><BR>'
        h->add, '</BODY></HTML>'

        openw, lun, html_filename, /get_lun
        h->print, lun=lun
        free_lun, lun

        obj_destroy, h
    endfor
end


pro idldoc_write_dir_overview, pro_dir, pro_files, title=title, $
    subtitle=subtitle, footer=footer, embed=embed, nonavbar=nonavbar, $
    file_hash=file_hash, user=user
    compile_opt idl2

    slashes = stroccur(pro_dir, '\/:', count=levels)
    root = ''
    for i = 0, levels - 2 do $
        root = root + '../'

    h = obj_new('html_output')

    h->add, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"' $
        + '"http://www.w3.org/TR/REC-html40/loose.dtd">'
    h->add, '<!-- Generated by IDLdoc on ' + systime() + ' -->'

    h->add, '<HEAD>'
    h->add, '<TITLE>Directory Overview: ' + idldoc_elim_slash(pro_dir) + '</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        h->add, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            h->add, sline
        endwhile
        h->add, '--></STYLE>'
        free_lun, slun
    endif else begin
        h->add, '<LINK REL=stylesheet TYPE="text/css" HREF="' + root + 'idldoc.css" ' $
            + 'TITLE="main_style">'
    endelse

    h->add, '</HEAD>'
    h->add, '<BODY CLASS="standard">'

    if (not keyword_set(nonavbar)) then $
        idldoc_navbar, html=h, /dir_overview, $
            href_overview=root+'overview.html', $
            user=keyword_set(user), $
            href_self='directory-overview.html', $
            href_index=root+'full-index.html', $
            href_start=root+'index.html', $
            href_help=root+'help.html', $
            title=title, $
            subtitle=subtitle

    h->header, 'Directory Overview: ' + idldoc_elim_slash(pro_dir), 1

    h->add, '<P>'

    if (file_test(pro_dir + 'directory.html')) then begin
        openr, plun, pro_dir + 'directory.html', /get_lun
        pline = ''
        while (not eof(plun)) do begin
            readf, plun, pline
            h->add, pline
        endwhile
        free_lun, plun
        h->add, '<P>'
    endif


    h->add, '<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" ' $
        + 'CLASS="listing">'
    h->add, '<TR><TD COLSPAN=2 CLASS="title">'
    h->add, '<A NAME="_file_summary">File Summary</A>'
    h->add, '</TD></TR>'

    for i = 0, n_elements(pro_files) - 1 do begin
        file = file_hash->get(pro_files[i], found=found)
        if (not found) then continue
        if (file->is_hidden() or (keyword_set(user) and file->is_private())) then continue

        filename = file_parts(pro_files[i], /basename)
        href = idldoc_pro_to_html(filename)
        h->add, '<TR><TD ALIGN="left" VALIGN="top" CLASS="listing">'
        h->add, '<A HREF="' + href + '">' + filename + '</A>'
        first_line = file->get_file_comments(/first_sentence, found=found)
        if (found) then $
            h->add, '<P CLASS="first_line">' + first_line + '</P>'
        h->add, '</TD></TR>'
    endfor

    h->add, '</TABLE>'


    ; End content of index
    h->add, '<P>'

    ; Put footer in - if present
    if (n_elements(footer) ne 0) then begin
        h->add, '<HR>'
        openr, flun, footer, /get_lun
        fline = ''
        while (not eof(flun)) do begin
            readf, flun, fline
            h->add, fline
        endwhile
        free_lun, flun
    endif

    h->add, '<HR>'
    h->add, '<FONT CLASS="tagline">Produced by IDLdoc ' $
        + idldoc_version() + ' on ' + systime() + '</FONT><BR>'
    h->add, '</BODY></HTML>'

    openw, lun, pro_dir + 'directory-overview.html', /get_lun
    h->print, lun=lun
    free_lun, lun

    obj_destroy, h
end


pro idldoc_write_directory_overviews, pro_dirs, pro_files, title=title, $
    subtitle=subtitle, footer=footer, embed=embed, nonavbar=nonavbar, $
    file_hash=file_hash, user=user
    compile_opt idl2, hidden

    for i = 0, n_elements(pro_dirs) - 1 do begin
        pro_files_path = file_parts(pro_files, /path) + path_sep()
        indices = where(pro_files_path eq pro_dirs[i], count)
        if (count gt 0) then begin
            dir_pro_files = pro_files[indices]
            idldoc_write_dir_overview, pro_dirs[i], dir_pro_files, $
                title=title, subtitle=subtitle, footer=footer, embed=embed, $
                nonavbar=nonavbar, file_hash=file_hash, user=user
        endif
    endfor
end


;+
; Create the index for the library.
;
; @private
; @param index_hash {in}{type=obj ref} hash table of index references
;-
pro idldoc_write_full_index, index_hash, title=title, subtitle=subtitle, $
    footer=footer, embed=embed, user=user
    compile_opt idl2, hidden

    h = obj_new('html_output')

    h->add, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"' $
        + '"http://www.w3.org/TR/REC-html40/loose.dtd">'
    h->add, '<!-- Generated by IDLdoc on ' + systime() + ' -->'

    h->add, '<HEAD>'
    h->add, '<TITLE>Index</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        h->add, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            h->add, sline
        endwhile
        h->add, '--></STYLE>'
        free_lun, slun
    endif else begin
        h->add, '<LINK REL=stylesheet TYPE="text/css" HREF="idldoc.css" ' $
            + 'TITLE="main_style">'
    endelse

    h->add, '</HEAD>'
    h->add, '<BODY CLASS="standard">'


    if (not keyword_set(nonavbar)) then $
        idldoc_navbar, html=h, /index, href_overview='overview.html', $
            user=keyword_set(user), href_self='full-index.html', $
            href_start='index.html', href_help='help.html', title=title, $
            subtitle=subtitle

    h->header, 'Index', 1

    ; Content of index

    names = index_hash->keys()
    links = index_hash->values()

    sindices = sort(strlowcase(names))

    n_entries = n_elements(names)
    names = names[sindices]
    links = links[sindices]

    letters = obj_new('hash_table', key_type=7, value_example=0)

    for i = 0, n_entries - 1 do begin
        l = strupcase(strmid(names[i], 0, 1))
        letters->put, l, i
    endfor

    letters_used = letters->keys()
    letters_order = letters->values()

    obj_destroy, letters

    sindices = sort(letters_order)
    letters_used = letters_used[sindices]
    letters_order = letters_order[sindices]

    for i = 0, n_elements(letters_used) - 1 do begin
        h->add, '<a href="#' + letters_used[i] + '">' + letters_used[i] $
            + '</a> '
    endfor
    h->add, '<br>'

    cur_letter = ''
    for i = 0, n_entries - 1 do begin
        if (strupcase(strmid(names[i], 0, 1)) ne cur_letter) then begin
            cur_letter = strupcase(strmid(names[i], 0, 1))
            h->header, cur_letter, 2, attributes='id="' + cur_letter + '"'
        endif

        entry = strsplit(names[i], '=', /extract)
        h->add, links[i] + entry[0] + '</a> - ' + entry[1] + '<br>'
    endfor

    ; End content of index
    h->add, '<P>'

    ; Put footer in - if present
    if (n_elements(footer) ne 0) then begin
        h->add, '<HR>'
        openr, flun, footer, /get_lun
        fline = ''
        while (not eof(flun)) do begin
            readf, flun, fline
            h->add, fline
        endwhile
        free_lun, flun
    endif

    h->add, '<HR>'
    h->add, '<FONT CLASS="tagline">Produced by IDLdoc ' $
        + idldoc_version() + ' on ' + systime() + '</FONT><BR>'
    h->add, '</BODY></HTML>'

    openw, lun, 'full-index.html', /get_lun
    h->print, lun=lun
    free_lun, lun

    obj_destroy, h
end


;+
; Processes the file specified by the OVERVIEW keyword to IDLdoc (if present)
; and creates the 'overview&#046;html' file that shows in the main browser
; frame when loading the 'index&#046;html' file. Always shows at least all
; subdirectories with IDL .pro files in them.
;
; @private
; @param overview {in} {type=string} filename of the content to be placed in
;        the overview.html file
; @param pro_dirs {in} {type=string array} a list of the directories containing
;        .pro code below the root directory
; @keyword nonavbar {in}{optional}{type=boolean}{default=false} set to exclude
;          navbar on overview page
; @keyword user {in}{optional}{type=boolean} set to give user documentation;
;          otherwise developer documentation is produced
; @keyword embed {in}{optional}{type=boolean} if set, embeds style sheet in
;          each HTML document
; @keyword warnings {out} {optional} {type=int} a named variable to return the
;          number of warnings
;-
pro idldoc_write_overview, overview, pro_dirs, warnings=warnings, user=user, $
    embed=embed, nonavbar=nonavbar, title=title, subtitle=subtitle, $
    footer=footer
    compile_opt idl2, hidden

    if (not file_test(overview)) then begin
        print, 'Overview file not found'
        warnings = warnings + 1
        return
    endif

    openw, lun, 'overview.html', /get_lun
    printf, lun, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN""http://www.w3.org/TR/REC-html40/frameset.dtd">'
    printf, lun, '<HTML>'
    printf, lun, '<HEAD>'
    printf, lun, '<!-- Generated by IDLdoc on ' + systime() + ' -->'
    printf, lun, '<TITLE>Overview</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        printf, lun, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            printf, lun, sline
        endwhile
        printf, lun, '--></STYLE>'
        free_lun, slun
    endif else begin
        printf, lun, '<LINK REL=stylesheet TYPE="text/css" HREF="idldoc.css" TITLE="main_style">'
    endelse

    printf, lun, '</HEAD>'
    printf, lun, '<BODY CLASS="standard">'

    if (not keyword_set(nonavbar)) then $
        idldoc_navbar, lun=lun, /overview, href_help='help.html', $
            user=keyword_set(user), href_self='overview.html', $
            href_start='index.html', href_index='full-index.html', title=title, $
            subtitle=subtitle

    comments = strarr(n_elements(pro_dirs)) + '.'

    if (overview ne '') then begin
        openr, oview_lun, overview, /get_lun
        nlines = 0

        line = ''
        while (not eof(oview_lun)) do begin
            readf, oview_lun, line
            nlines = nlines + 1
        endwhile

        point_lun, oview_lun, 0
        oview_lines = strarr(nlines)
        readf, oview_lun, oview_lines

        idldoc_find_at_symbol, oview_lines, line_num, pos

        if (line_num eq -1) then begin
            printf, lun, oview_lines
        endif else begin
            for i = 0, line_num do begin
                if (i eq line_num) then $
                    printf, lun, strmid(oview_lines[i], 0, pos) $
                else printf, lun, oview_lines[i]
            endfor
            tag_lines = oview_lines[line_num:*]
            tag_lines[0] = strmid(tag_lines[0], pos)
            idldoc_process_tags, tag_lines, pro_dirs, comments, warnings=warnings
        endelse
    endif

    printf, lun, '<P>'

    printf, lun, '<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" CLASS="listing">'
    printf, lun, '<TR><TD COLSPAN=2 CLASS="title">Directories</TD></TR>'

    for i = 0, n_elements(pro_dirs) - 1 do begin
        printf, lun, '<TR>'
        printf, lun, '<TD ALIGN="right" VALIGN="top" WIDTH="1%" class="listing">'
        printf, lun, '<A HREF="' + idldoc_elim_slash(pro_dirs[i]) $
            + '/dir-files.html" NAME="' + idldoc_elim_slash(pro_dirs[i]) $
            + '" TARGET="dir_frame">'
        printf, lun, idldoc_elim_slash(pro_dirs[i]) + '</A></TD>'
        printf, lun, '<TD CLASS="listing">' + comments[i] + '</TD>'
        printf, lun, '</TR>'
    endfor

    printf, lun, '</TABLE>'

    printf, lun, '<P>'

    ; Put footer in - if present
    if (n_elements(footer) ne 0) then begin
        printf, lun, '<HR>'
        openr, flun, footer, /get_lun
        fline = ''
        while (not eof(flun)) do begin
            readf, flun, fline
            printf, lun, fline
        endwhile
        free_lun, flun
    endif

    printf, lun, '<HR>'
    printf, lun, '<FONT CLASS="tagline">Produced by IDLdoc ' + idldoc_version() + ' on ' + systime() + '</FONT><BR>'
    printf, lun, '</BODY></HTML>'

    if (overview ne '') then $
        free_lun, oview_lun
    free_lun, lun
end


;+
; Create help&#046;html in the root directory.  Assumes the current working
; directory is the root directory.
;
; @private
; @keyword nonavbar {in}{optional}{type=boolean}{default=false} set to exclude
;          navbar on help page
; @keyword user {in}{optional}{type=boolean} set to give user documentation;
;          otherwise developer documentation is produced
; @keyword embed {in}{optional}{type=boolean} if set, embeds style sheet in
;          each HTML document
; @keyword warnings {out} {optional} {type=int} a named variable to return the
;          number of warnings
;-
pro idldoc_write_help, warnings=warnings, user=user, embed=embed, $
    nonavbar=nonavbar, title=title, subtitle=subtitle
    compile_opt idl2, hidden
    on_error, 2

    h = obj_new('html_output')
    h->add, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"' $
        + '"http://www.w3.org/TR/REC-html40/loose.dtd">'
    h->add, '<!-- Generated by IDLdoc on ' + systime() + ' -->'

    h->add, '<HEAD>'
    h->add, '<TITLE>Help</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        h->add, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            h->add, sline
        endwhile
        h->add, '--></STYLE>
        free_lun, slun
    endif else begin
        h->add, '<LINK REL=stylesheet TYPE="text/css" HREF="idldoc.css" ' $
            + 'TITLE="main_style">'
    endelse

    h->add, '</HEAD>'
    h->add, '<BODY CLASS="standard">'

    if (not keyword_set(nonavbar)) then $
        idldoc_navbar, html=h, /help, href_overview='overview.html', $
            user=keyword_set(user), href_self='help.html', $
            href_start='index.html', href_index='full-index.html', title=title, $
            subtitle=subtitle

    h->header, 'Help on IDLdoc output', 1

    h->header, 'Routine summary', 2
    h->add, 'The routine summary simply provides the calling sequence for each routine in the fle and the first sentence of the detailed description.'

    h->header, 'Routine Details', 2
    h->add, 'The routine details sections gives a possibly longer description of the routine as well as a tables of the parameters and keywords accepted by the routine.'
    h->add, 'All the parameters and keywords of the routine will be in these tables regardless if they have been commented using IDLdoc.'

    h->header, 'Notes on routine attributes', 3

    h->add, 'See the IDLdoc page for IDLdoc itself for a full listing of the attributes of a routine.'
    h->p

    h->b_table, attributes='border="1" cellpadding="3" cellspacing="0" width="100%"'
    h->b_tr, background='CCCCFF'
    h->td, bold('Attribute'), attributes='width="1%" valign="top"'
    h->td, bold('Description')
    h->e_tr
    h->b_tr
    h->td, 'abstract', attributes='valign="top"'
    h->td, 'The routine name will be italicized if the routine is marked "abstract" (meaning it is not implemented, it is provided for its interface).  This is generally used in only object-oriented programming.'
    h->e_tr
    h->e_table

    h->header, 'Keyword and parameter attributes', 3

    h->b_table, attributes='border="1" cellpadding="3" cellspacing="0" width="100%"'
    h->b_tr, background='CCCCFF'
    h->td, bold('Attribute'), attributes='width="1%" valign="top"'
    h->td, bold('Description')
    h->e_tr
    h->b_tr
    h->td, 'in', attributes='valign="top"'
    h->td, 'indicates that the argument is intended to be passed into the routine.'
    h->e_tr
    h->b_tr
    h->td, 'out', attributes='valign="top"'
    h->td, 'indicates that the argument is intended to be used to pass a value out of the routine.  A named variable must be passed to the routine to pass a value back to the calling level.'
    h->e_tr
    h->b_tr
    h->td, 'optional', attributes='valign="top"'
    h->td, 'indicates the argument is optional; optional parameters and' $
        + ' keywords are also placed inside brackets ([]) in the routine summary.'
    h->e_tr
    h->b_tr
    h->td, 'type', attributes='valign="top"'
    h->td, '"type" indicates the type of the variable.  Can be used indicate ' $
        + 'a group of types, a specific type, an array of a certain type, ' $
        + 'etc.  Boolean keywords are indicated by a /KEYWORD_NAME in the ' $
        + 'routine summary.'
    h->e_tr
    h->e_table

    h->add, '<P>'
    h->add, '<HR>'
    h->add, '<FONT CLASS="tagline">Produced by IDLdoc ' $
        + idldoc_version() + ' on ' + systime() + '</FONT><BR>'
    h->add, '</BODY></HTML>'

    ofilename = 'help.html'
    openw, lun, ofilename, /get_lun
    h->print, lun=lun
    free_lun, lun

    obj_destroy, h
end


;+
; Create index&#046;html in the root directory.  Assumes the current working
; directory is the root directory.
;
; @private
;-
pro idldoc_write_index
    compile_opt idl2, hidden

    h = obj_new('html_output')
    h->add, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">'
    h->add, '<!-- Generated by IDLdoc on ' + systime() + ' -->'
    h->b_html, title='IDLdoc'
    h->add, '<LINK REL="SHORTCUT ICON" HREF="idldoc.ico">'
    h->add, '<FRAMESET cols="20%,80%">'
    h->add, '<FRAMESET rows="30%,70%">'
    h->add, '<FRAME src="all-dirs.html" name="dirslist_frame">'
    h->add, '<FRAME src="all-files.html" name="dir_frame">'
    h->add, '</FRAMESET>'
    h->add, '<FRAME src="overview.html" name="file_frame">'
    h->add, '</FRAMESET>'
    h->add, '<NOFRAMES>'
    h->add, '<H2>Frame Alert</H2>'
    h->add, '<P>'
    h->add, 'This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.'
    h->add, '<BR>'
    h->add, 'Link to <A HREF="overview.html">Non-frame version.</A></NOFRAMES>'
    h->e_html

    ofilename = 'index.html'
    openw, lun, ofilename, /get_lun
    h->print, lun=lun
    free_lun, lun

    obj_destroy, h
end


;+
; Writes the 'dir-files&#046;html' file in each directory that contains the
; links to each of the .pro files in that directory.
;
; @private
; @param pro_files {in} {type=string array} a string array of all the pro
;        files under the 'root' directory
; @keyword embed {in}{optional}{type=boolean} if set, embeds style sheet in
;          each HTML document
; @param pro_dir {in} {type=string} string representing the current directory
;-
pro idldoc_write_dir_files, pro_files, pro_dir, embed=embed, user=user, $
    file_hash=file_hash
    compile_opt idl2, hidden

    indices = where(idldoc_get_dirname(pro_files) eq pro_dir, count)

    slashes = stroccur(pro_dir, '\/:', count=levels)
    root = ''
    for i = 0, levels - 2 do $
        root = root + '../'

    if (not file_test(pro_dir, /directory)) then begin
        file_mkdir, pro_dir
    endif

    ofilename = pro_dir + 'dir-files.html'
    openw, lun, ofilename, /get_lun

    printf, lun, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN"' $
        + '"http://www.w3.org/TR/REC-html40/frameset.dtd">'
    printf, lun, '<!-- Generated by IDLdoc on ' + systime() + ' -->'
    printf, lun, '<HTML>'
    printf, lun, '<HEAD>'
    printf, lun, '<TITLE>' + idldoc_elim_slash(pro_dir) + '</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        printf, lun, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            printf, lun, sline
        endwhile
        printf, lun, lun, '--></STYLE>'
        free_lun, slun
    endif else begin
        printf, lun, '<LINK REL=stylesheet TYPE="text/css" HREF="' + root $
            + 'idldoc.css" TITLE="main_style">'
    endelse

    printf, lun, '</HEAD>'
    printf, lun, '<BODY CLASS="standard">'
    printf, lun, '<FONT CLASS="list_title">'
    printf, lun, '<A HREF="directory-overview.html" TARGET="file_frame">' $
        + idldoc_elim_slash(pro_dir) + '</A></FONT>'
    printf, lun, '<BR><P>'

    n_files = 0
    if (count gt 0) then begin
        files = pro_files[indices]
        printf, lun, '<TABLE BORDER="0" WIDTH="100%">'
        printf, lun, '<TR>'
        printf, lun, '<TD NOWRAP>'
        printf, lun, '<FONT CLASS="list_title">Files</FONT><BR>'
        basenames = get_basename(files)
        bindices = sort(basenames)
        for i = 0, n_elements(files) - 1 do begin
            file = file_hash->get(files[i], found=found)
            if (not found) then continue
            hidden = (keyword_set(user) and file->is_private()) or file->is_hidden()
            if (hidden) then continue

            n_files = n_files + 1
            printf, lun, '<FONT CLASS="list"><A HREF="' + $
                idldoc_elim_slash(idldoc_pro_to_html(basenames[bindices[i]])) + $
                '" TARGET="file_frame">' + basenames[bindices[i]] $
                + '</A></FONT><BR>'
        endfor

        printf, lun, '</TD></TR>'
        printf, lun, '</TABLE>'
    endif

    printf, lun, '<FONT CLASS="list_tagline">' $
        + strtrim(n_files, 2) + ' file(s)</FONT>'
    printf, lun, '</BODY></HTML>'

    free_lun, lun
end


;+
; Writes the all-files&#046;html file in the root directory.
;
; @private
; @param pro_files {in} {type=string array} a string array of all the pro
;        files under the 'root' directory
; @keyword embed {in}{optional}{type=boolean} if set, embeds style sheet in
;          each HTML document
;-
pro idldoc_write_all_files, pro_files, embed=embed, file_hash=file_hash, $
    user=user
    compile_opt idl2, hidden

    ofilename = 'all-files.html'
    openw, lun, ofilename, /get_lun

    printf, lun, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN"' $
        + '"http://www.w3.org/TR/REC-html40/frameset.dtd">'
    printf, lun, '<!-- Generated by IDLdoc on ' + systime() + ' -->'
    printf, lun, '<HTML>'
    printf, lun, '<HEAD>'
    printf, lun, '<TITLE>All Files</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        printf, lun, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            printf, lun, sline
        endwhile
        printf, lun, lun, '--></STYLE>'
        free_lun, slun
    endif else begin
        printf, lun, '<LINK REL=stylesheet TYPE="text/css" ' $
            + 'HREF="idldoc.css" TITLE="main_style">'
    endelse

    printf, lun, '</HEAD>'
    printf, lun, '<BODY CLASS="standard">'
    printf, lun, '<FONT CLASS="list_title">All Files</FONT>'
    printf, lun, '<BR>'

    printf, lun, '<TABLE BORDER="0" WIDTH="100%">'
    printf, lun, '<TR>'
    printf, lun, '<TD NOWRAP>'

    basenames = get_basename(pro_files)
    bindices = sort(basenames)

    n_files = 0
    for i = 0, n_elements(pro_files) - 1 do begin
        file = file_hash->get(pro_files[bindices[i]], found=found)
        if (not found) then continue
        hidden = (keyword_set(user) and file->is_private()) or file->is_hidden()
        if (hidden) then continue

        n_files = n_files + 1
        printf, lun, '<FONT CLASS="list"><A HREF="' + $
            idldoc_elim_slash(idldoc_pro_to_html(pro_files[bindices[i]])) $
            + '" TARGET="file_frame">' + basenames[bindices[i]] $
            + '</A></FONT><BR>'
    endfor

    printf, lun, '</TD></TR>'
    printf, lun, '</TABLE>
    printf, lun, '<FONT CLASS="list_tagline">' $
        + strtrim(n_files, 2) + ' file(s)</FONT>'
    printf, lun, '</BODY></HTML>'

    free_lun, lun
end


;+
; Writes the all-dirs&#046;html file in the root directory.
;
; @private
; @param pro_dirs {in} {type=string array} a string array of all the
;        directories under the 'root' directory that contain .pro files;
;        may not be valid, must check count gt 0 first
; @param count {in} {type=int} the number of directories in pro_dirs
; @keyword embed {in}{optional}{type=boolean} if set, embeds style sheet in
;          each HTML document
;-
pro idldoc_write_all_dirs, pro_dirs, count, embed=embed
    compile_opt idl2, hidden

    ofilename = 'all-dirs.html'
    openw, lun, ofilename, /get_lun

    printf, lun, '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN"' $
        + '"http://www.w3.org/TR/REC-html40/frameset.dtd">'
    printf, lun, '<HTML>'
    printf, lun, '<HEAD>'
    printf, lun, '<!-- Generated by IDLdoc on ' + systime() + ' -->'
    printf, lun, '<TITLE>Directories</TITLE>'

    if (keyword_set(embed)) then begin
        openr, slun, 'idldoc.css', /get_lun
        sline = ''
        printf, lun, '<STYLE><!--'
        while (not eof(slun)) do begin
            readf, slun, sline
            printf, lun, sline
        endwhile
        printf, lun, lun, '--></STYLE>
        free_lun, slun
    endif else begin
        printf, lun, '<LINK REL=stylesheet TYPE="text/css" ' $
            + 'HREF="idldoc.css" TITLE="main_style">'
    endelse

    printf, lun, '</HEAD>'
    printf, lun, '<BODY CLASS="standard">'
    printf, lun, '<FONT CLASS="list_title">Directories</FONT>'
    printf, lun, '<BR><P>'

    printf, lun, '<FONT CLASS="list">' $
        + '<A HREF="all-files.html" TARGET="dir_frame">All Directories</A>' $
        + '</FONT>'

    if (count gt 0) then begin
        printf, lun, '<TABLE BORDER="0" WIDTH="100%">'
        printf, lun, '<TR>'
        printf, lun, '<TD NOWRAP>'

        sindices = sort(pro_dirs)

        for i = 0, n_elements(pro_dirs) - 1 do begin
            printf, lun, '<FONT CLASS="list"><A HREF="' $
                + idldoc_elim_slash(pro_dirs[sindices[i]]) $
                + '/dir-files.html' + '" TARGET="dir_frame">' $
                + idldoc_elim_slash(pro_dirs[sindices[i]]) + '</A></FONT><BR>'
        endfor

        printf, lun, '</TD></TR>'
        printf, lun, '</TABLE>'
        printf, lun, '<FONT CLASS="list_tagline">' $
            + strtrim(n_elements(pro_dirs), 2) + ' directories</FONT>'
    endif

    printf, lun, '</BODY></HTML>'

    free_lun, lun
end


;+
; Find the directories with &#046;pro files in them.
;
; @private
; @returns string array of the directories with .pro files in them, or -1 if
;          there are none
; @param pro_files {in} {type=string array} a string array of all the pro
;        files under the 'root' directory
; @param ndirs {out} {type=int} the number of directories under the root
;        directory that contain .pro files
;-
function idldoc_find_dirs, pro_files, ndirs
    compile_opt idl2, hidden

    n_pro_files = n_elements(pro_files)
    dirs = strarr(n_pro_files)
    ndirs = 0

    for i = 0, n_pro_files - 1 do begin
        ind = where(dirs eq idldoc_get_dirname(pro_files[i]), count)
        if (count eq 0) then begin
            dirs[ndirs] = idldoc_get_dirname(pro_files[i])
            ndirs = ndirs + 1
        endif
    endfor

    return, ndirs gt 0 ? dirs[0:(ndirs-1)] : -1
end


;+
; @file_comments IDLdoc is a hypertext documentation system for IDL code.  It
; is intended to show the API of a library of code in an easy to browse
; manner.  It produces HTML pages -- one page per '.pro' file, as
; well as directory listing, overview pages, and an index of files, routines,
; keywords, and parameter names.
;
; <p> Unmarked code may be processed by IDLdoc to produce a browseable
; listing of routines and their arguments.  But to obtain more useful
; results, the source can be marked to produce formatted comments in
; the output. Each routine has special tags to indicate particular
; information for IDLdoc formatting use. HTML markup tags may be used
; anywhere comments are expected.  See the
; <A HREF="idldoc_files.html">help</A> for individual files for specifics about
; the tags available.
;
; <p> For a more an example of code that has been documented using IDLdoc,
; check IDLdoc's source for its comments and compare to its output.
;
; <p> Class listings and fields summary will be generated for files which
; end with __DEFINE.PRO.  Use the "field" tag to make comments on each
; field of the class/structure defined.
;
; <p> An overview file can be specified with the OVERVIEW keyword to IDLdoc.
; This file is a plain text file with comments (which can contain HTML codes)
; that will be displayed on a summary page.  The below tags are processed by
; IDLdoc.
;
; <p>
;
; <table width="100%" border="1" cellspacing="0" cellpadding="3">
; <tr bgcolor="#DDDDDD"><td colspan="2"><b>Overview Tags</b></td></tr>
; <tr><td width="100" align="right" valign="top">dir</td>
; <td>Comment for a directory.  The first parameter to dir is the directory
; name relative to the root dir.  The rest of the tag content is the comment.
; </td></tr>
; </table>
;
; <p> The style of the output of IDLdoc can be changed by editing the
; cascading style sheet used: idldoc.css found in the same directory
; as IDLdoc.
;
; <p> This help was produced by IDLdoc.
;
; @examples To run IDLdoc, try:
;      <center><code>idldoc, root='C:\\mycode',
;          overview='overview'</code></center>
;    where C:\mycode is the root of a directory tree containing IDL
;    .pro files and there is a file named 'overview' in C:\mycode
;    that contains an overview description of the library.
;
; @keyword root {in}{type=string} root directory for IDLdoc's
;          recursive search for .pro files.  IDLdoc will find any
;          files with the '.pro' suffix and include them in its file
;          listings.  Only directories with '.pro' files in them are
;          included in the directory listings.
; @keyword nonavbar {in}{optional}{type=boolean} set to exclude the
;          navigation bar at the top of each page
; @keyword output {in}{optional}{type=string}{default=same as root}
;          directory in which to create the HTML output and possible
;          subdirectories
; @keyword overview {in}{type=string} filepath to a file containing
;          the summary of the package information about each
;          directory in the package.
; @keyword quiet {in} {optional} {type=boolean} if set, print only
;          warnings
; @keyword silent {in}{optional}{type=boolean} if set, print no
;          messages
; @keyword user {in}{optional}{type=boolean} set to create a
;          listing appropriate for <em>users</em> of the given
;          library hierarchy; the default is to create documentation
;          suited to developers.  If set private routines are not
;          shown in the documentation.
; @keyword embed {in}{optional}{type=boolean} if set, embeds style
;          sheet in each HTML document; if this is not set, each HTML
;          file will be looking for the cascading style sheet idldoc.css
;          in the directory specified for the ROOT keyword
; @keyword footer {in}{optional}{type=string} filename for a footer
;          to be placed at the bottom of files; this file can contain any valid
;          HTML
; @keyword title {in}{optional}{type=string}{default=Research Systems} title to
;          place in the upper right of all generated pages
; @keyword subtitle {in}{optional}{type=string}{default=IDL version} subtitle to
;          place in the upper right of all generated pages
; @requires IDL 5.5
; @author Michael D. Galloy
; @copyright RSI, 2002
;-
pro idldoc, root=root, footer=footer, output=output, overview=overview, $
    user=user, quiet=quiet, silent=silent, embed=embed, nonavbar=nonavbar, $
    title=title, subtitle=subtitle
    compile_opt idl2

    catch, error_no
    if (error_no ne 0) then begin
        catch, /cancel
        print, 'IDLdoc ending on unknown error'
        heap_gc
        return
    endif

    total_warnings = 0

    if (n_elements(overview) eq 0) then overview = ''

    if (n_elements(root) eq 0) then root='.' + path_sep()
    if (not file_test(root, /directory)) then $
        message, 'unable to find directory specified by ROOT keyword'

    idldoc_root = sourceroot()
    idldoc_css = idldoc_root + 'idldoc.css'
    if (last_char(root) ne path_sep()) then root = root + path_sep()
    if (n_elements(output) eq 0) then output = root
    if (last_char(output) ne path_sep()) then output = output + path_sep()

    if (not file_test(output, /directory)) then begin
        file_mkdir, output
    endif

    if (not file_test(idldoc_css)) then $
        message, 'cascading style sheet, ' + idldoc_css + ', not found'

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Copying stylesheet...'
    idldoc_filecopy, idldoc_css, output + path_sep() + 'idldoc.css'

    idldoc_binary_filecopy, idldoc_root + 'idldoc.ico', $
        output + path_sep() + 'idldoc.ico'

    cd, current=start_dir
    cd, root
    pro_files = file_search('.', '*.pro')
    cd, start_dir

    pro_dirs = idldoc_find_dirs(pro_files, count)
    if (count le 0) then begin
        print, 'No .PRO files in ROOT file hierarchy'
        return
    endif
    sindices = sort(pro_files)
    pro_files = pro_files[sindices]

    cd, current=start_dir

    sindices = sort(pro_dirs)
    pro_dirs = pro_dirs[sindices]

    index_hash = obj_new('hash_table', array_size=3001, key_type=7, value_type=7)

    class_files = file_search(root, '*__define.pro', /fold_case)
    file_hash = obj_new('hash_table', array_size=1001, key_type=7, value_type=11)

    for j = 0, n_elements(pro_dirs) - 1 do begin
        dpro_files_ind = where(idldoc_get_dirname(pro_files) eq pro_dirs[j])
        dpro_files = pro_files[dpro_files_ind]

        for i = 0, n_elements(dpro_files) - 1 do begin
            if (not keyword_set(quiet) and not keyword_set(silent)) then $
                print, 'Creating doc for ' + root + $
                    strmid(dpro_files[i], 2) + '...'
            prev = i eq 0 ? '' : dpro_files[i-1]
            next = i eq (n_elements(dpro_files) - 1) ? '' : dpro_files[i+1]
            file = obj_new('IDLdcFile', dpro_files[i], warnings=warnings, $
                user=keyword_set(user), root=root, output=output, $
                next=next, prev=prev, nonavbar=nonavbar, $
                embed=keyword_set(embed), footer=footer, index_has=index_hash, $
                title=title, subtitle=subtitle, silent=keyword_set(silent))
            hide_file = file->is_hidden() or (keyword_set(user) and file->is_private())
            if (not hide_file) then begin
                file->output, class_files=class_files
            endif
            file_hash->put, dpro_files[i], file
            if ((warnings ne 0) and (not hide_file) and keyword_set(quiet) $
                and not keyword_set(silent)) then begin
                    print, strtrim(warnings, 2) + ' warning(s) creating ' + $
                        root + strmid(dpro_files[i], 2) + '...'
                    print, '--'
            endif
            total_warnings = total_warnings + warnings
        endfor
    endfor

    cd, current=start_dir
    cd, output

    cd, output

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating directory files listing...'
    for i = 0, count - 1 do $
        idldoc_write_dir_files, pro_files, pro_dirs[i], $
            embed=keyword_set(embed), user=user, file_hash=file_hash

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating overview-summary.html...'
    idldoc_write_overview, overview, pro_dirs, warnings=total_warnings, $
        user=keyword_set(user), embed=keyword_set(embed), nonavbar=nonavbar, $
        title=title, subtitle=subtitle, footer=footer

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating help.html...'
    idldoc_write_help, warnings=total_warnings, user=keyword_set(user), $
        embed=keyword_set(embed), nonavbar=nonavbar, title=title, $
        subtitle=subtitle

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating file listings...'
    idldoc_write_all_files, pro_files, embed=keyword_set(embed), $
        file_hash=file_hash, user=keyword_set(user)

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating directory listings...'
    idldoc_write_all_dirs, pro_dirs, count, embed=keyword_set(embed)

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating index.html...'
    idldoc_write_index

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating full-index.html...'
    idldoc_write_full_index, index_hash, title=title, subtitle=subtitle, $
        footer=footer, embed=keyword_set(embed), user=keyword_set(user)

    if (not keyword_set(quiet) and not keyword_set(silent)) then $
        print, 'Creating directory-overview.html for each directory...'
    idldoc_write_directory_overviews, pro_dirs, pro_files, title=title, $
        subtitle=subtitle, footer=footer, embed=keyword_set(embed), $
        nonavbar=keyword_set(nonavbar), file_hash=file_hash, user=keyword_set(user)

    etc_files = file_search('.', '*.idldoc', count=n_etc)

    if (n_etc gt 0) then begin
        if (not keyword_set(quiet) and not keyword_set(silent)) then $
            print, 'Creating .idldoc files...'
        idldoc_write_etc, etc_files, title=title, $
            subtitle=subtitle, footer=footer, embed=keyword_set(embed), $
            nonavbar=keyword_set(nonavbar), user=keyword_set(user)
    endif

    if (not keyword_set(silent)) then $
        if (not keyword_set(quiet) or total_warnings ne 0) then $
            print, strtrim(total_warnings, 2) + ' total warning(s)'

    obj_destroy, index_hash
    obj_destroy, file_hash, /clean

    cd, start_dir
end

