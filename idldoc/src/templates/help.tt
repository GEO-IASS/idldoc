<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Help ([% title %])</title>

    [% IF embed %]
    <style type="text/css" media="all">
      [% INCLUDE css_location %]
    </style>
    <style type="text/css" media="print">
      [% INCLUDE print_css_location %]
    </style>
    [% ELSE %]
    <link rel="stylesheet" type="text/css" media="all" 
          href="idldoc-resources/main.css" />
    <link rel="stylesheet" type="text/css" media="print" 
          href="idldoc-resources/main-print.css" />
    [% END %]
    
    <script type="text/javascript">
      function setTitle() {
        parent.document.title="Help ([% title %])";
      }
    </script>
  </head>
    
  <body onload="setTitle();">
    [% INCLUDE_TEMPLATE idldoc_header_location %]
    
    <div class="content">
    	
    	<div id="calling">
    		<h2>Calling IDLdoc</h2>
    	
    		<p>To install IDLdoc, simply unzip and place the IDLdoc distribution in your IDL path. Do not separate the contents of the distribution; the code looks for files in locations relative to itself.</p>
    		
    		<p>A typical call to IDLdoc is: <code class="listing">IDL> idldoc, root='~/projects/mylib', output='~/projects/mylib-docs'</code> This searches for .pro and .sav files in subdirectories of '~/projects/mylib' and places the output in '~/projects/mylib-docs'. The starting page for the output will be '~/projects/mylib-docs/index.html'.</p>

				<p>There are quite a few keywords to IDLdoc to set various specifications for the output. Further customization can be done through the templates (described in the <a href="#customizing">"Producing customized output"</a> section).</p>
				
				<table class="small">
			    <tr>
			      <td class="name">ROOT</td>
			      <td>root of directory hierarchy to document</td>
			    </tr>

			    <tr>
			      <td class="name">OUTPUT</td>
			      <td>directory to place output</td>
			    </tr>

			    <tr>
			      <td class="name">QUIET</td>
			      <td>if set, don't print info messages, only print warnings and errors</td>
			    </tr>
			    
			    <tr>
			      <td class="name">N_WARNINGS</td>
			      <td>set to a named variable to return the number of warnings for the</td>
			    </tr>			    
			    
			    <tr>
			      <td class="name">ERROR</td>
			      <td>set to a named variable to return the error state of the IDLdoc call; 0 indicates no error, anything else is an error</td>
			    </tr>
			    
			    <tr>
			      <td class="name">LOG_FILE</td>
			      <td>if present, send messages to this filename instead of stdout</td>
			    </tr>
			    			    
			    <tr>
			      <td class="name">ASSISTANT</td>
			      <td>set to generate docs in IDL Assistant format</td>
			    </tr>

			    <tr>
			      <td class="name">EMBED</td>
			      <td>embed CSS stylesheet instead of linking to it (useful for documentation where individual pages must stand by themselves)</td>
			    </tr>
			    
			    <tr>
			      <td class="name">OVERVIEW</td>
			      <td>filename of overview text and directory information</td>
			    </tr>

			    <tr>
			      <td class="name">FOOTER</td>
			      <td>filename of file to insert into the bottom of each page of docs</td>
			    </tr>

			    <tr>
			      <td class="name">TITLE</td>
			      <td>title of docs</td>
			    </tr>

			    <tr>
			      <td class="name">SUBTITLE</td>
			      <td>subtitle for docs</td>
			    </tr>

			    <tr>
			      <td class="name">NONAVBAR</td>
			      <td>set to not display the navbar</td>
			    </tr>

			    <tr>
			      <td class="name">NOSOURCE</td>
			      <td>don't put source code into output</td>
			    </tr>

			    <tr>
			      <td class="name">USER</td>
			      <td>set to generate user-level docs (private parameters, files are not shown); the default is developer-level docs showing files and parameters</td>
			    </tr>

			    <tr>
			      <td class="name">STATISTICS</td>
			      <td>generate complexity statistics for routines</td>
			    </tr>

			    <tr>
			      <td class="name">FORMAT_STYLE</td>
			      <td>style to use to parse file and routine comments ("idl", "idldoc", "verbatim", or "rst"); default is "idldoc"</td>
			    </tr>

			    <tr>
			      <td class="name">MARKUP_STYLE</td>
			      <td>markup used in comments ("rst" or "verbatim"); default is "verbatim"</td>
			    </tr>	
			    
			    <tr>
			      <td class="name">COMMENT_STYLE</td>
			      <td>output format for comments ("html", "rst", or "latex"); default is "html"</td>
			    </tr>			    

			    <tr>
			      <td class="name">TEMPLATE_PREFIX</td>
			      <td>prefix for template's names</td>
			    </tr>
			    
			    <tr>
			      <td class="name">TEMPLATE_LOCATION</td>
			      <td>set to directory to find templates in</td>
			    </tr>
			    			    			    
			    <tr>
			      <td class="name">PREFORMAT</td>
			      <td>obsolete; no longer used</td>
			    </tr>	
			    
			    <tr>
			      <td class="name">BROWSE_ROUTINES</td>
			      <td>obsolete; no longer used</td>
			    </tr>			    		    		    
        </table>
      				    
    	</div>
    	
    	
    	<div id="commenting">
    		<h2>Commenting your code</h2>
    	
    	  <p>Parsing of comments is handled by two different parsers: the format parser and the markup parser. The format parser breaks down the comment block into sections (i.e. finds the tags), handles attributes of tags that allow them, and then hands off the parsing of text comments to the markup parser (i.e. the description of a file, routine, parameter or other text in tags).</p>
    	  
    	  <p>IDLdoc now accepts three different styles of commenting: IDLdoc style (the only style available in IDLdoc 2.0), the traditional IDL provided comment template, or a new restructured text style. The style to use can be specified with the FORMAT_STYLE keyword to IDLdoc (as a global setting for the run) or on each individual file with a "docformat" comment. Furthermore, a markup style which specifies how to parse comment blocks can also be set. The two markup styles are: verbatim (the only markup style in IDLdoc 2.0) or a restructured text style. The markup styles are specified via the MARKUP_STYLE keyword to IDLdoc or using a "docformat" comment.</p> 
    		
    	  <p>For example, for the below file sets it format parser to be "idldoc" and its markup parser to be "verbatim": <code class="listing">; docformat = 'idldoc verbatim'

;+
; Comments here are for the file. They are parsed using the verbatim 
; markup style (i.e. they are just copied into the output). The tags 
; below are parsed by the comment style parser, the idldoc format 
; parser in this case, but the contents of the tags are then handed off
; to the markup parser.
;
; @author Michael Galloy (this text is also parsed by the markup parser)
;-

;+
; These are some comments about my routine. Comments here are parsed by 
; the markup parser.
;
; @returns status code (this is parsed by the markup parser)
;-
function my_routine
  return, 1
end</code></p>

        <p>Each format parser is discussed in its own section below.</p>
        
    		
    		<h3>IDLdoc format</h3>
    		
    		<p>Tags are prefixed with an "@" sign. Tag names are case-insensitive. They must be the first non-whitespace character after the comment symbol ";" on a line. Arguments follow the tags after whitespace. Attributes are enclosed curly braces "{}".</p>
    		
    		<p>For example, a tag with no arguments appears like: <code class="listing">; @abstract</code> Tags with an argument: <code class="listing">; @returns string/strarr</code> Tags with attributes appear like: <code class="listing">; @param x {in}{required}{type=fltarr} independent variable
; @param y {in}{required}{type=fltarr} dependent variable</code></p>
    		
    		
    		<h3>IDL format</h3>
    		
    		
    		<h3>Restructured text format</h3>
    		
    		<p>Tags must be the first non-whitespace character on the line. Tag names are case-insensitive. For tags with arguments, the arguments/attributes must be on the same line. Indentation is significant; for tags with multiple arguments, each argument must be consistently indented at least two spaces. Attributes are separated from the argument by a ":" and from each other with commas. Comments for the argument must be further consistently indented at least two more spaces.</p>
    		
    		<p>Tags with no arguments: <code class="listing">; :Abstract:</code> or with an argument <code class="listing">; :Returns: string/strarr</code> or arguments with attributes: <code class="listing">; :Params:
;    x : in, required, type=fltarr 
;       independent variable
;    y : in, required, type=fltarr
;       dependent variable</code></p>
      </div>
      
      <div id="tags">
        <h2>Tags</h2>
      
        <p>Tags describe a particular aspect of the file or routine they are associated with.</p>
        
        <p>Slight differences across formats.</p>
        
        
        <h3>File tags</h3>

        <p>The following tags are available in file comments (i.e. comment headers not immediately preceeding/following a routine header).</p>
        
        <table class="small">
          <thead>
            <tr>
              <td class="name">Tag name</td>
              <td class="name">Arguments</td>
              <td class="name">Attributes</td>
              <td class="name">Description</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="name">author</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies the author of the file.</td>
            </tr>

            <tr>
              <td class="name">copyright</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies the copyright information for the file.</td>
            </tr>

            <tr>
              <td class="name">examples</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies examples of usage.</td>
            </tr>                        
            
            <tr>
              <td class="name">hidden</td>
              <td>none</td>
              <td>none</td>
              <td>If present, indicates the file is not to be shown in the documentation.</td>
            </tr>                        

            <tr>
              <td class="name">history</td>
              <td>comments</td>
              <td>none</td>
              <td>Lists the history for the file.</td>
            </tr>                        

            <tr>
              <td class="name">private</td>
              <td>none</td>
              <td>none</td>
              <td>If present, indicates the file should not shown in user-level documentation (set with the USER keyword to IDLdoc).</td>
            </tr>                        

            <tr>
              <td class="name">property</td>
              <td>property name, comments</td>
              <td>none</td>
              <td>Describes a property of a class (i.e. a keyword to getProperty, setProperty, or init).</td>
            </tr>                        

            <tr>
              <td class="name">properties</td>
              <td>property name, comments</td>
              <td>none</td>
              <td>Describes properties of a class (i.e. a keyword to getProperty, setProperty, or init). rst only.</td>
            </tr>
            
            <tr>
              <td class="name">version</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies the version of the file.</td>
            </tr>                        
          </tbody>
        </table>            
        
            
        <h3>Routine tags</h3>
        
        <table class="small">
          <thead>
            <tr>
              <td class="name">Tag name</td>
              <td class="name">Arguments</td>
              <td class="name">Attributes</td>
              <td class="name">Description</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="name">abstract</td>
              <td>none</td>
              <td>none</td>
              <td>If present, indicates the method is not implemented and present only to specify the interface to subclasses' implementations.</td>
            </tr>

            <tr>
              <td class="name">author</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies the author of the routine.</td>
            </tr>
            
            <tr>
              <td class="name">returns</td>
              <td>comments</td>
              <td>none</td>
              <td>Specifies the return value of the function.</td>
            </tr>            
          </tbody>
        </table>


        <h3>Attributes</h3>
        
        <p>Attributes for tags that allow them.</p>
        
        <table class="small">
          <thead>
            <tr>
              <td class="name">Attribute name</td>
              <td class="name">Syntax</td>
              <td class="name">Description</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="name">in</td>
              <td><code>in</code></td>
              <td>Indicates the parameter is an input.</td>
            </tr>

            <tr>
              <td class="name">out</td>
              <td><code>out</code></td>
              <td>Indicates the parameter is an output.</td>
            </tr>

            <tr>
              <td class="name">optional</td>
              <td><code>optional</code></td>
              <td>Indicates argument is optional.</td>
            </tr>

            <tr>
              <td class="name">private</td>
              <td><code>private</code></td>
              <td>Indicates argument is not shown if IDLdoc is run in user mode (USER keyword to IDLdoc is set).</td>
            </tr>

            <tr>
              <td class="name">hidden</td>
              <td><code>hidden</code></td>
              <td>Indicates the argument is not to be shown.</td>
            </tr>

            <tr>
              <td class="name">required</td>
              <td><code>in</code></td>
              <td>Indicates argument is required.</td>
            </tr>

            <tr>
              <td class="name">type</td>
              <td><code>type=comments</code></td>
              <td>IDL data type of the argument.</td>
            </tr>

            <tr>
              <td class="name">default</td>
              <td><code>default=comments</code></td>
              <td>Default value of the argument.</td>
            </tr>
          </tbody>
        </table>        
    	</div>
    	
    	
    	<div id="customizing">  
    		<h2>Producing customized output</h2>
    	
    		<p>IDLdoc uses text file templates to create its output. These can be customized to produce any kind of text output: HTML, LaTeX, DocBook, restructured text, etc. The templates are located in the "templates" directory of the distribution. But instead of modifying them directly IDLdoc provides a mechanism to provide a location to your own sets of templates with the TEMPLATE_PREFIX and TEMPLATE_LOCATION keywords.</p>
    		
    		<p>To produce output of a different style than HTML, use the COMMENT_STYLE keyword to specify a type of output (html, rst, and latex are provided). Other styles can be created as well.</p>
    	</div>

      [% IF footer ne '' %][% INCLUDE_TEMPLATE footer %][% END %]
		</div>    

    [% INCLUDE_TEMPLATE idldoc_footer_location %]
  </body>
</html>